---
name: Release Deploy (approvals)
description: |
  This workflow drafts a release when a tag is pushed to the repository.
  It checks for changes in specific directories and publishes packages to PyPI and npmjs if there are changes.
  The release is created when the jobs succeed, and it includes generated release notes.
  NOTE: The tag format must match `YYYY.MM.YYYYMMDDHHIISS` to complete a "Release"
  This workflow is intended for a protected environment for approval or rejection.
on:
  push:
    tags:
      - '[0-9][0-9][0-9][0-9].[0-9]+.[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'
permissions:
  actions: none
  attestations: none
  checks: none
  contents: none
  deployments: none
  discussions: none
  id-token: none
  issues: none
  models: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none
jobs:
  validate-repository:
    name: Validate Repository
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    outputs:
      is-authorized-repo: ${{ steps.validate-repo.outputs.is-authorized-repo }}
    steps:
      - name: Validate repository and tag
        id: validate-repo
        run: |
          set -euo pipefail

          CURRENT_REPO="${{ github.repository }}"
          AUTHORIZED_REPO="${{ vars.REPOSITORY || 'awslabs/mcp' }}"
          TAG_NAME="${{ github.ref_name }}"

          echo "::debug::Validating repository: $CURRENT_REPO"
          echo "::debug::Authorized repository: $AUTHORIZED_REPO"
          echo "::debug::Tag: $TAG_NAME"

          # Validate tag format
          if [[ ! "$TAG_NAME" =~ ^[0-9]{4}\.[0-9]+\.[0-9]{14}$ ]]; then
            echo "::error::Invalid tag format: $TAG_NAME" >&2
            echo "::error::Expected format: YYYY.MM.YYYYMMDDHHIISS" >&2
            exit 1
          fi

          # Check repository authorization
          if [[ "$CURRENT_REPO" == "$AUTHORIZED_REPO" ]]; then
            echo "is-authorized-repo=true" >> $GITHUB_OUTPUT
            echo "::debug::Repository authorized for release"
          else
            echo "is-authorized-repo=false" >> $GITHUB_OUTPUT
            echo "::debug::Repository not authorized for release: $CURRENT_REPO"
          fi
  skip-unauthorized:
    name: Skip Unauthorized Repository
    if: needs.validate-repository.outputs.is-authorized-repo != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [validate-repository]
    steps:
      - name: Skip unauthorized repository
        run: |
          echo "::debug::Intentionally skipped - not intended to be run outside '${{ vars.REPOSITORY || 'awslabs/mcp' }}'"
          echo "::debug::Current repository: ${{ github.repository }}"
  draft_release_when_tagged:
    name: Draft Release
    if: needs.validate-repository.outputs.is-authorized-repo == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    needs: [validate-repository,look-for-changes]
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Draft release with validation
        id: draft-release
        env:
          GH_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          VERSION="${{ github.ref_name }}"
          echo "::debug::Creating draft release for version: $VERSION"

          # Validate version format again
          if [[ ! "$VERSION" =~ ^[0-9]{4}\.[0-9]+\.[0-9]{14}$ ]]; then
            echo "::error::Invalid version format: $VERSION" >&2
            exit 1
          fi

          # Check if release already exists
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "::error::Release already exists: $VERSION" >&2
            exit 1
          fi

          # Create draft release with validation
          gh release create "$VERSION" \
            --generate-notes \
            --draft \
            --verify-tag

          # Generate and update release notes
          echo "# $VERSION" > RELEASE_NOTES.md
          gh release view "$VERSION" --json body | jq -r '.body' > GENERATED_NOTES.md

          # Update release with combined notes
          cat RELEASE_NOTES.md GENERATED_NOTES.md | gh release edit "$VERSION" \
            --draft=true \
            --notes-file -

          echo "::debug::Successfully created draft release: $VERSION"
  look-for-changes:
    name: Look for Changes Since Last Published Release
    if: needs.validate-repository.outputs.is-authorized-repo == 'true'
    env:
      SRC_DIRECTORY: ${{ vars.SRC_DIRECTORY || secrets.SRC_DIRECTORY || 'src' }}
    outputs:
      changed-directories: ${{ steps.find-changed-directories.outputs.changed-directories }}
      python-changed-directories: ${{ steps.find-changed-directories.outputs.python-changed-directories }}
      node-changed-directories: ${{ steps.find-changed-directories.outputs.node-changed-directories }}
      docker-changed-directories: ${{ steps.find-changed-directories.outputs.docker-changed-directories }}
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-repository]
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Validate source directory
        run: |
          set -euo pipefail  # SECURITY: Strict error handling

          SRC_DIR="${{ env.SRC_DIRECTORY }}"
          echo "::debug::Validating source directory: $SRC_DIR"

          # Validate directory name format
          if [[ ! "$SRC_DIR" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "::error::Invalid source directory format: $SRC_DIR" >&2
            exit 1
          fi

          # Check if directory exists
          if [[ ! -d "$SRC_DIR" ]]; then
            echo "::error::Source directory does not exist: $SRC_DIR" >&2
            exit 1
          fi

          echo "::debug::Source directory validated: $SRC_DIR"
      - name: Find Changed Directories Since Last Published Release
        id: find-changed-directories
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "::debug::Finding changed directories since last published release"

          # Get last published release with validation
          SINCE="$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r '.[].tagName // empty')"

          if [[ -z "$SINCE" ]]; then
            echo "::warning::No previous published release found, using initial commit" >&2
            SINCE="$(git rev-list --max-parents=0 HEAD)"
          else
            echo "::debug::Comparing against published release: $SINCE"

            # Validate tag exists
            if ! git rev-parse "$SINCE" >/dev/null 2>&1; then
              echo "::error::Published release tag does not exist in repository: $SINCE" >&2
              exit 1
            fi
          fi

          # Get changed files with validation
          CHANGED_FILES="$(git diff --name-only "$SINCE" HEAD | sed 's/^\.\///' | jq -R -s -c 'split("\n")[:-1]')"

          # Filter and validate source directories
          SRC_DIRECTORIES="$(echo "$CHANGED_FILES" | jq -r --arg src "${{ env.SRC_DIRECTORY }}" \
            '.[] | select(. | startswith($src + "/"))' | \
            cut -d'/' -f2 | \
            sort -u | \
            while IFS= read -r dir; do
              # Validate directory name format
              if [[ "$dir" =~ ^[a-zA-Z0-9_-]+$ ]] && [[ -n "$dir" ]]; then
                # Check if DO_NOT_RELEASE file exists
                if [[ -f "${{ env.SRC_DIRECTORY }}/$dir/DO_NOT_RELEASE" ]]; then
                  echo "::warning::Skipping because DO_NOT_RELEASE: $dir" >&2
                else
                  echo "$dir"
                fi
              else
                echo "::warning::Skipping invalid directory name: $dir" >&2
              fi
            done | \
            jq -R -s -c 'split("\n")[:-1] | map(select(length > 0))')"

          echo "changed-directories=$SRC_DIRECTORIES" >> $GITHUB_OUTPUT

          # Find Python packages with validation
          PYTHON_CHANGED_DIRECTORIES="$(echo "$SRC_DIRECTORIES" | jq -r '.[]' | \
            while IFS= read -r dir; do
              if [[ -f "${{ env.SRC_DIRECTORY }}/$dir/pyproject.toml" ]]; then
                echo "$dir"
              fi
            done | \
            jq -R -s -c 'split("\n")[:-1] | map(select(length > 0))')"

          # Find Node packages with validation
          NODE_CHANGED_DIRECTORIES="$(echo "$SRC_DIRECTORIES" | jq -r '.[]' | \
            while IFS= read -r dir; do
              if [[ -f "${{ env.SRC_DIRECTORY }}/$dir/package.json" ]]; then
                echo "$dir"
              fi
            done | \
            jq -R -s -c 'split("\n")[:-1] | map(select(length > 0))')"

          # Find Docker packages with validation
          DOCKER_CHANGED_DIRECTORIES="$(echo "$SRC_DIRECTORIES" | jq -r '.[]' | \
            while IFS= read -r dir; do
              if [[ -f "${{ env.SRC_DIRECTORY }}/$dir/Dockerfile" ]]; then
                echo "$dir"
              fi
            done | \
            jq -R -s -c 'split("\n")[:-1] | map(select(length > 0))')"

          echo "python-changed-directories=$PYTHON_CHANGED_DIRECTORIES" >> $GITHUB_OUTPUT
          echo "node-changed-directories=$NODE_CHANGED_DIRECTORIES" >> $GITHUB_OUTPUT
          echo "docker-changed-directories=$DOCKER_CHANGED_DIRECTORIES" >> $GITHUB_OUTPUT

          echo "::debug::Found changed directories: $SRC_DIRECTORIES"
          echo "::debug::Python packages: $PYTHON_CHANGED_DIRECTORIES"
          echo "::debug::Node packages: $NODE_CHANGED_DIRECTORIES"
          echo "::debug::Docker packages: $DOCKER_CHANGED_DIRECTORIES"
  publish-npmjs:
    name: Publish to NPMjs
    if: needs.validate-repository.outputs.is-authorized-repo == 'true' && needs.look-for-changes.outputs.node-changed-directories != '[]' && needs.look-for-changes.outputs.node-changed-directories != ''
    env:
      SRC_DIRECTORY: ${{ vars.SRC_DIRECTORY || secrets.SRC_DIRECTORY || 'src' }}
    strategy:
      fail-fast: false
      matrix:
        changed-directory: ${{ fromJson(needs.look-for-changes.outputs.node-changed-directories) }}
      max-parallel: 10
    runs-on: ubuntu-latest
    timeout-minutes: 1
    permissions:
      contents: read
    needs: [validate-repository, draft_release_when_tagged, look-for-changes]
    steps:
      - name: Validate package directory
        run: |
          set -euo pipefail

          CHANGED_DIR="${{ matrix.changed-directory }}"
          echo "::debug::Validating Node.js package directory: $CHANGED_DIR"

          # Validate directory name format
          if [[ ! "$CHANGED_DIR" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "::error::Invalid directory name format: $CHANGED_DIR" >&2
            exit 1
          fi

          echo "::debug::Directory validated: $CHANGED_DIR"
  publish-pypi:
    name: Publish to PyPI
    if: needs.validate-repository.outputs.is-authorized-repo == 'true' && needs.look-for-changes.outputs.python-changed-directories != '[]' && needs.look-for-changes.outputs.python-changed-directories != ''
    env:
      SRC_DIRECTORY: ${{ vars.SRC_DIRECTORY || secrets.SRC_DIRECTORY || 'src' }}
    environment:
      name: release
      url: https://pypi.org/project/awslabs.${{ matrix.changed-directory }}
    strategy:
      fail-fast: false
      matrix:
        changed-directory: ${{ fromJson(needs.look-for-changes.outputs.python-changed-directories) }}
      max-parallel: 10
    runs-on: ubuntu-latest
    timeout-minutes: 240  # allow time for large packages but prevent hanging
    permissions:
      contents: read
      id-token: write
    needs: [validate-repository, draft_release_when_tagged, look-for-changes]
    steps:
      # Clear up space for specific large projects
      - name: Clear Up Space (Aggressively) for Specific Projects
        if: contains(fromJson('["core-mcp-server"]'), matrix.changed-directory)
        uses: awslabs/mcp/.github/actions/clear-space-ubuntu-latest-agressively@c2d7bf853b8e31f22697101601bd4a0438c09f13
      #TODO: remove local action checkout when working...
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          sparse-checkout: |
            ${{ env.SRC_DIRECTORY }}/${{ matrix.changed-directory }}
            ./.github/actions/build-and-push-container-image
      - name: Validate package directory
        run: |
          set -euo pipefail

          CHANGED_DIR="${{ matrix.changed-directory }}"
          FULL_PATH="${{ env.SRC_DIRECTORY }}/$CHANGED_DIR"

          echo "::debug::Validating Python package directory: $FULL_PATH"

          # Validate directory name format
          if [[ ! "$CHANGED_DIR" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "::error::Invalid directory name format: $CHANGED_DIR" >&2
            exit 1
          fi

          # Check if directory exists
          if [[ ! -d "$FULL_PATH" ]]; then
            echo "::error::Directory does not exist: $FULL_PATH" >&2
            exit 1
          fi

          # Validate pyproject.toml exists
          if [[ ! -f "$FULL_PATH/pyproject.toml" ]]; then
            echo "::error::pyproject.toml not found in: $FULL_PATH" >&2
            exit 1
          fi

          # Check for path traversal attempts
          RESOLVED_PATH="$(realpath "$FULL_PATH")"
          EXPECTED_PREFIX="$(realpath "${{ env.SRC_DIRECTORY }}")"

          if [[ ! "$RESOLVED_PATH" == "$EXPECTED_PREFIX"/* ]]; then
            echo "::error::Path traversal detected: $FULL_PATH" >&2
            exit 1
          fi

          echo "::debug::Directory validated: $FULL_PATH"
      - name: Install uv
        uses: astral-sh/setup-uv@3259c6206f993105e3a61b142c2d97bf4b9ef83d # v7.1.0
      - name: Build package
        working-directory: ${{ env.SRC_DIRECTORY }}/${{ matrix.changed-directory }}
        run: |
          set -euo pipefail
          echo "::debug::Building package: ${{ matrix.changed-directory }}"
          uv build
          echo "::debug::Package build completed"
      - name: Get Version from Package
        id: get-package-version
        working-directory: ${{ env.SRC_DIRECTORY }}/${{ matrix.changed-directory }}
        run: |
          set -euo pipefail

          # Get version with validation
          VERSION="$(uv tree 2>/dev/null | grep awslabs | sed -e 's/^.*[[:space:]]v\(.*\)/\1/g' | head -1)"

          if [[ -z "$VERSION" ]]; then
            echo "::error::Failed to extract version for: ${{ matrix.changed-directory }}" >&2
            exit 1
          fi

          # Validate version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $VERSION" >&2
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "::debug::Package version: $VERSION"
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        with:
          packages-dir: ${{ env.SRC_DIRECTORY }}/${{ matrix.changed-directory }}/dist
          print-hash: true
      - name: Build and Publish Container
        id: build-and-publish
        uses: ./.github/actions/build-and-push-container-image
        if: hashFiles(format('./{0}/{1}/Dockerfile', env.SRC_DIRECTORY, matrix.changed-directory))
        with:
          image: ${{ matrix.changed-directory }}
          version: ${{ steps.get-package-version.outputs.version }}
          public-erc-role-to-assume: ${{ secrets.AWS_ROLE_ARN_TO_ASSUME || 'arn:aws:iam::444455556666:role/Admin' }}
          public-erc-registry-alias: ${{ vars.REGISTRY_ALIAS || 'awslabs-mcp' }}
          public-erc-aws-region: ${{ env.AWS_REGION || 'us-east-1' }}
      - name: Distributions Summary
        working-directory: ${{ env.SRC_DIRECTORY }}/${{ matrix.changed-directory }}
        run: |
          set -euo pipefail
          echo "::debug::Publishing completed for: ${{ matrix.changed-directory }}"
          echo "::debug::Distribution files:"
          ls -la dist/ || echo "No dist directory found"
          echo "### :package: Published" >> $GITHUB_STEP_SUMMARY
          echo "* [PyPi](https://pypi.org/project/awslabs.${{ matrix.changed-directory }})" >> $GITHUB_STEP_SUMMARY
          echo "::debug::Docker images:"
          docker images || echo "No Docker images found"
          echo "* [Public ECR](https://gallery.ecr.aws/awslabs-mcp/awslabs/${{ matrix.changed-directory }} (if applicable)"  >> $GITHUB_STEP_SUMMARY
  release_when_successful:
    name: Publish Release
    if: needs.validate-repository.outputs.is-authorized-repo == 'true' && !failure() && !cancelled() && (needs.publish-npmjs.result == 'success' || needs.publish-pypi.result == 'success' || (needs.publish-npmjs.result == 'skipped' && needs.publish-pypi.result == 'skipped'))
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    needs: [validate-repository, draft_release_when_tagged, publish-pypi, publish-npmjs]
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Publish release
        id: create-release
        env:
          GH_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          VERSION="${{ github.ref_name }}"
          echo "::debug::Publishing release: $VERSION"

          # Validate version format
          if [[ ! "$VERSION" =~ ^[0-9]{4}\.[0-9]+\.[0-9]{14}$ ]]; then
            echo "::error::Invalid version format: $VERSION" >&2
            exit 1
          fi

          # Verify draft release exists
          if ! gh release view "$VERSION" --json isDraft | jq -e '.isDraft == true' >/dev/null; then
            echo "::error::Draft release not found or already published: $VERSION" >&2
            exit 1
          fi

          # Publish the release
          gh release edit "$VERSION" --draft=false

          echo "::debug::Successfully published release: $VERSION"
          echo "### :rocket: Released" >> $GITHUB_STEP_SUMMARY
          echo "[$VERSION](https://github.com/${{ github.repository }}/releases/tag/$VERSION)" >> $GITHUB_STEP_SUMMARY
