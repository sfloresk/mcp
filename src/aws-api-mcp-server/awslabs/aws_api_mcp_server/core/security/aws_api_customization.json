{
  "customizations": {
    "cloudformation deploy": {
      "api_calls": [
        "aws s3api head-object",
        "aws s3 cp",
        "aws cloudformation execute-change-set",
        "aws cloudformation create-change-set",
        "aws cloudformation wait change-set-create-complete"
      ]
    },
    "cloudformation package": {
      "api_calls": [
        "aws s3 cp"
      ]
    },
    "cloudtrail create-subscription": {
      "api_calls": [
        "aws s3api get-object",
        "aws s3api head-bucket",
        "aws s3api create-bucket",
        "aws s3api put-bucket-policy",
        "aws s3api delete-bucket",
        "aws sns list-topics",
        "aws sns create-topic",
        "aws sns get-topic-attributes",
        "aws sns set-topic-attributes",
        "aws sns delete-topic",
        "aws cloudtrail create-trail",
        "aws cloudtrail update-trail",
        "aws cloudtrail describe-trails",
        "aws cloudtrail start-logging"
      ]
    },
    "cloudtrail update-subscription": {
      "api_calls": [
        "aws s3api get-object",
        "aws s3api head-bucket",
        "aws s3api create-bucket",
        "aws s3api put-bucket-policy",
        "aws s3api delete-bucket",
        "aws sns list-topics",
        "aws sns create-topic",
        "aws sns get-topic-attributes",
        "aws sns set-topic-attributes",
        "aws sns delete-topic",
        "aws cloudtrail create-trail",
        "aws cloudtrail update-trail",
        "aws cloudtrail describe-trails",
        "aws cloudtrail start-logging"
      ]
    },
    "cloudtrail validate-logs": {
      "api_calls": [
        "aws cloudtrail describe-trails",
        "aws organizations describe-organization",
        "aws s3api list-objects",
        "aws s3api get-object",
        "aws cloudtrail list-public-keys",
        "aws s3api get-bucket-location"
      ]
    },
    "codeartifact login": {
      "api_calls": [
        "aws codeartifact get-repository-endpoint",
        "aws codeartifact get-authorization-token"
      ]
    },
    "configservice get-status": {
      "api_calls": [
        "aws configservice describe-configuration-recorder-status"
      ]
    },
    "configservice subscribe": {
      "api_calls": [
        "aws s3api create-bucket",
        "aws sns create-topic",
        "aws configservice put-configuration-recorder",
        "aws configservice put-delivery-channel",
        "aws configservice start-configuration-recorder",
        "aws configservice describe-configuration-recorders",
        "aws configservice describe-delivery-channels"
      ]
    },
    "datapipeline create-default-roles": {
      "api_calls": [
        "aws iam get-role",
        "aws iam create-role",
        "aws iam attach-role-policy",
        "aws iam get-policy-version",
        "aws iam get-policy"
      ]
    },
    "datapipeline list-runs": {
      "api_calls": [
        "aws datapipeline query-objects",
        "aws datapipeline describe-objects"
      ]
    },
    "deploy deregister": {
      "api_calls": [
        "aws iam delete-user-policy",
        "aws iam delete-access-key",
        "aws iam delete-user",
        "aws deploy get-on-premises-instance",
        "aws deploy remove-tags-from-on-premises-instances",
        "aws deploy deregister-on-premises-instance"
      ]
    },
    "deploy install": {
      "api_calls": [
        "aws s3api get-object"
      ]
    },
    "deploy push": {
      "api_calls": [
        "aws deploy register-application-revision",
        "aws s3api put-object",
        "aws s3api create-multipart-upload",
        "aws s3api upload-part",
        "aws s3api complete-multipart-upload",
        "aws s3api abort-multipart-upload"
      ]
    },
    "deploy register": {
      "api_calls": [
        "aws deploy register-on-premises-instance",
        "aws deploy add-tags-to-on-premises-instances",
        "aws iam create-user",
        "aws iam create-access-key",
        "aws iam put-user-policy"
      ]
    },
    "dlm create-default-role": {
      "api_calls": [
        "aws iam get-role",
        "aws iam get-policy",
        "aws iam create-role",
        "aws iam attach-role-policy"
      ]
    },
    "ecr get-login": {
      "api_calls": [
        "aws ecr get-authorization-token"
      ]
    },
    "ecr get-login-password": {
      "api_calls": [
        "aws ecr get-authorization-token"
      ]
    },
    "ecr-public get-login-password": {
      "api_calls": [
        "aws ecr-public get-authorization-token"
      ]
    },
    "ecs deploy": {
      "api_calls": [
        "aws ecs describe-services",
        "aws ecs register-task-definition",
        "aws deploy get-application",
        "aws deploy get-deployment-group",
        "aws deploy create-deployment",
        "aws deploy wait deployment-successful"
      ]
    },
    "eks get-token": {
      "api_calls": [
        "aws sts assume-role",
        "aws sts get-caller-identity",
        "aws sts presign-url",
        "aws sts get-caller-identity"
      ]
    },
    "eks update-kubeconfig": {
      "api_calls": [
        "aws sts assume-role",
        "aws eks describe-cluster"
      ]
    },
    "emr add-instance-groups": {
      "api_calls": [
        "aws emr add-instance-groups"
      ]
    },
    "emr add-steps": {
      "api_calls": [
        "aws emr add-job-flow-steps"
      ]
    },
    "emr create-cluster": {
      "api_calls": [
        "aws emr run-job-flow"
      ]
    },
    "emr create-default-roles": {
      "api_calls": [
        "aws ec2 describe-regions",
        "aws iam get-instance-profile",
        "aws iam create-instance-profile",
        "aws iam add-role-to-instance-profile",
        "aws iam attach-role-policy",
        "aws iam create-role",
        "aws iam get-policy",
        "aws iam get-policy-version"
      ]
    },
    "emr create-hbase-backup": {
      "api_calls": [
        "aws emr add-job-flow-steps"
      ]
    },
    "emr describe-cluster": {
      "api_calls": [
        "aws emr describe-cluster",
        "aws emr list-instance-fleets",
        "aws emr list-instance-groups",
        "aws emr list-bootstrap-actions"
      ]
    },
    "emr disable-hbase-backups": {
      "api_calls": [
        "aws emr add-job-flow-steps"
      ]
    },
    "emr get": {
      "api_calls": [
        "aws emr describe-cluster"
      ]
    },
    "emr install-applications": {
      "api_calls": [
        "aws emr add-job-flow-steps"
      ]
    },
    "emr modify-cluster-attributes": {
      "api_calls": [
        "aws emr set-visible-to-all-users",
        "aws emr set-termination-protection",
        "aws emr set-keep-job-flow-alive-when-no-steps",
        "aws emr set-unhealthy-node-replacement"
      ]
    },
    "emr put": {
      "api_calls": [
        "aws emr describe-cluster"
      ]
    },
    "emr restore-from-hbase-backup": {
      "api_calls": [
        "aws emr add-job-flow-steps"
      ]
    },
    "emr schedule-hbase-backup": {
      "api_calls": [
        "aws emr add-job-flow-steps"
      ]
    },
    "emr socks": {
      "api_calls": [
        "aws emr describe-cluster"
      ]
    },
    "emr ssh": {
      "api_calls": [
        "aws emr describe-cluster",
        "aws emr wait"
      ]
    },
    "emr terminate-cluster": {
      "api_calls": [
        "aws emr terminate-job-flows"
      ]
    },
    "emr-containers update-role-trust-policy": {
      "api_calls": [
        "aws eks describe-cluster",
        "aws iam get-role",
        "aws iam update-assume-role-policy"
      ]
    },
    "gamelist get-game-session-log": {
      "api_calls": [
        "aws gamelift get-game-session-log-url"
      ]
    },
    "gamelist upload-build": {
      "api_calls": [
        "aws gamelift create-build",
        "aws gamelift request-upload-credentials",
        "aws s3 cp"
      ]
    },
    "logs start-live-tail": {
      "api_calls": [
        "aws logs start-live-tail"
      ]
    },
    "rds generate-db-auth-token": {
      "api_calls": [
        "aws rds generate-db-auth-token"
      ]
    },
    "s3 cp": {
      "api_calls": [
        "aws s3api copy-object",
        "aws s3api upload-part-copy",
        "aws s3api put-object",
        "aws s3api upload-part",
        "aws s3api head-object",
        "aws s3api get-object"
      ]
    },
    "s3 ls": {
      "api_calls": [
        "aws s3api list-buckets",
        "aws s3api list-objects-v2"
      ]
    },
    "s3 mb": {
      "api_calls": [
        "aws s3api create-bucket"
      ]
    },
    "s3 mv": {
      "api_calls": [
        "aws s3api copy-object",
        "aws s3api upload-part-copy",
        "aws s3api delete-object"
      ]
    },
    "s3 presign": {
      "api_calls": [
        "aws s3 presign"
      ]
    },
    "s3 rb": {
      "api_calls": [
        "aws s3api delete-bucket"
      ]
    },
    "s3 rm": {
      "api_calls": [
        "aws s3api delete-object"
      ]
    },
    "s3 sync": {
      "api_calls": [
        "aws s3api copy-object",
        "aws s3api upload-part-copy",
        "aws s3api put-object",
        "aws s3api upload-part",
        "aws s3api head-object",
        "aws s3api get-object"
      ]
    },
    "s3 website": {
      "api_calls": [
        "aws s3api put-bucket-website"
      ]
    },
    "servicecatalog generate": {
      "api_calls": [
        "aws s3 cp",
        "aws servicecatalog create-product"
      ]
    }
  }
}
